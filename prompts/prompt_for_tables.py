from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
import pandas as pd

from typing import Any

from enrichment.llms import get_analysis_llm


def describe_table(name: str, df: pd.DataFrame) -> str:
    """
    Use LangChain to generate a textual description of a table based on its schema and sample rows.

    Args:
        df (pd.DataFrame): The DataFrame to describe.

    Returns:
        str: The textual description of the table generated by GPT.
    """
    # Extract schema
    schema = ", ".join([f"{col} {_get_sql_type(dtype)}" for col, dtype in zip(df.columns, df.dtypes)])

    # Sample rows
    sample_size = min(5, len(df))  # Limit to 5 rows for brevity
    sampled_rows = df.sample(n=sample_size, random_state=42).to_string(index=False, header=False)

    # Combine schema and sample rows into a context
    context = f"Schema: {name}({schema})\n\nSample Rows:\n{sampled_rows}"

    # Initialize the GPT model
    llm = get_analysis_llm()

    # Create a prompt template
    prompt = ChatPromptTemplate.from_messages([
        ("system", "You are an expert data analyst. Summarize the table schema and sample rows."),
        ("user", "Here is the table information:\n\n{context}\n\nPlease provide a summary and description of the table.")
    ])

    # Create the LangChain chain
    chain = prompt | llm | StrOutputParser()

    # Run the chain with the context
    response = chain.invoke({"context": context})

    return response


def _get_sql_type(dtype: Any) -> str:
    """
    Map Pandas data types to SQL data types.

    Args:
        dtype (pd.api.types.DtypeObj): The Pandas data type.

    Returns:
        str: The corresponding SQL data type.
    """
    if pd.api.types.is_integer_dtype(dtype):
        return "INTEGER"
    elif pd.api.types.is_float_dtype(dtype):
        return "DOUBLE PRECISION"
    elif pd.api.types.is_bool_dtype(dtype):
        return "BOOLEAN"
    elif pd.api.types.is_datetime64_any_dtype(dtype):
        return "TIMESTAMP"
    else:
        return "TEXT"


