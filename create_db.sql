
CREATE USER kair with password 'kair_pass';

create role kair with login password 'kair_pass';
-- grant kair to kair;

grant connect on database postgres to kair;
grant usage on schema public to kair;

CREATE EXTENSION IF NOT EXISTS vectorscale CASCADE;

-- Generated by the database client.
CREATE TABLE crawl_queue(
    id integer GENERATED ALWAYS AS IDENTITY NOT NULL,
    create_time date,
    url varchar(4096),
    comment varchar(255),
    PRIMARY KEY(id)
);
-- Generated by the database client.
CREATE TABLE crawled(
    id integer NOT NULL,
    crawl_time date NOT NULL,
    path varchar(255),
    PRIMARY KEY(id,crawl_time),
    CONSTRAINT crawled_id_fkey FOREIGN key(id) REFERENCES crawl_queue(id)
);

  CREATE TABLE papers(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT,
    abstract TEXT,
    url TEXT,
    crawl_time DATE
)

ALTER TABLE papers
    ADD CONSTRAINT unique_papers UNIQUE(url, crawl_time);

CREATE TABLE paragraphs(  
    paragraph_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    paper_id int,
    paragraph_text TEXT,
    embedding vector(1536),
    PRIMARY KEY (paragraph_id),
    FOREIGN KEY (paper_id) REFERENCES papers(id) ON DELETE CASCADE
);

CREATE INDEX para_embedding_idx ON paragraphs
USING diskann (embedding vector_cosine_ops);
--COMMENT ON TABLE crawl_queue IS '';
--COMMENT ON COLUMN table_name.name IS '';

CREATE TABLE paragraph_tags(
    paragraph_id INTEGER,
    tag TEXT,
    PRIMARY KEY (paragraph_id, tag),
    FOREIGN KEY (paragraph_id) REFERENCES paragraphs(paragraph_id) ON DELETE CASCADE
);

-- Generated by the database client.
CREATE TABLE authors(
    author_id integer GENERATED ALWAYS AS IDENTITY NOT NULL,
    author_name text,
    organization text,
    email varchar(255),
    PRIMARY KEY(author_id)
);
CREATE INDEX author_name_idx ON authors USING btree ("author_name");
CREATE INDEX organization_idx ON authors USING btree ("organization");

CREATE TABLE paper_authors(
    paper_id integer,
    author_id integer,
    PRIMARY KEY (paper_id, author_id),
    FOREIGN KEY (paper_id) REFERENCES papers(id) ON DELETE CASCADE,
    FOREIGN KEY (author_id) REFERENCES authors(author_id) ON DELETE CASCADE
);

create table paper_tags(
    tag_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    paper_id integer,
    tag_name text,
    tag_value text,
    tag_embed vector(1536),
    foreign key (paper_id) references papers(id) ON DELETE CASCADE
);

ALTER TABLE paper_tags
    ADD CONSTRAINT unique_paper_tags UNIQUE(paper_id, tag_name);

CREATE INDEX tag_idx ON paper_tags(tag_name);
CREATE INDEX tag_val_idx ON paper_tags(tag_value);

CREATE INDEX paper_tag_embedding_idx ON paper_tags
USING diskann (tag_embed vector_cosine_ops);

create table paragraph_tags(
    tag_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    paragraph_id integer,
    tag_name text,
    tag_value text,
    tag_embed vector(1536),
    foreign key (paragraph_id) references paragraphs(paragraph_id) ON DELETE CASCADE
);

ALTER TABLE paragraph_tags
    ADD CONSTRAINT unique_paragraph_tags UNIQUE(paragraph_id, tag_name);

CREATE INDEX paragraph_tag_idx ON paragraph_tags(tag_name);
CREATE INDEX paragraph_tag_val_idx ON paragraph_tags(tag_value);

CREATE INDEX paragraph_tag_embedding_idx ON paragraph_tags
USING diskann (tag_embed vector_cosine_ops);

CREATE VIEW paragraph_tags_view AS
    SELECT paragraph_id, tag_name, tag_value
    FROM paragraph_tags
    UNION
    select paragraph_id, tag_name, tag_value
    from paragraphs JOIN paper_tags ON paper_tags.paper_id = paragraphs.paper_id;

grant select, insert, update, delete on all tables in schema public to kair;

