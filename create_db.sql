
CREATE USER kair with password 'kair_pass';

create role kair with login password 'kair_pass';
-- grant kair to kair;

grant connect on database postgres to kair;
grant usage on schema public to kair;

CREATE EXTENSION IF NOT EXISTS vectorscale CASCADE;

-- Generated by the database client.
CREATE TABLE crawl_queue(
    id integer GENERATED ALWAYS AS IDENTITY NOT NULL,
    create_time date,
    url varchar(4096),
    comment varchar(255),
    PRIMARY KEY(id)
);
-- Generated by the database client.
CREATE TABLE crawled(
    id integer NOT NULL,
    crawl_time date NOT NULL,
    path varchar(255),
    PRIMARY KEY(id,crawl_time),
    CONSTRAINT crawled_id_fkey FOREIGN key(id) REFERENCES crawl_queue(id)
);

--   CREATE TABLE papers(
--     id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--     title TEXT,
--     abstract TEXT,
--     url TEXT,
--     crawl_time DATE
-- )

-- ALTER TABLE papers
--     ADD CONSTRAINT unique_papers UNIQUE(url, crawl_time);

-- CREATE TABLE paragraphs(  
--     paragraph_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
--     paper_id int,
--     paragraph_text TEXT,
--     embedding vector(1536),
--     PRIMARY KEY (paragraph_id),
--     FOREIGN KEY (paper_id) REFERENCES papers(id) ON DELETE CASCADE
-- );

-- CREATE INDEX para_embedding_idx ON paragraphs
-- USING diskann (embedding vector_cosine_ops);
-- --COMMENT ON TABLE crawl_queue IS '';
-- --COMMENT ON COLUMN table_name.name IS '';

-- CREATE TABLE paragraph_tags(
--     paragraph_id INTEGER,
--     tag TEXT,
--     PRIMARY KEY (paragraph_id, tag),
--     FOREIGN KEY (paragraph_id) REFERENCES paragraphs(paragraph_id) ON DELETE CASCADE
-- );
CREATE TABLE strategies(
    strategy_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    strategy_name TEXT,
    strategy_prompt TEXT,
    strategy_promise FLOAT,
    strategy_json JSON,
    strategy_embed vector(1536)
);

CREATE TYPE entity_types AS ENUM ('synopsis', 
                                  'fact', 
                                  'new_concept',
                                  'claim',
                                  'author', 
                                  'organization', 
                                  'tag', 
                                  'paper', 
                                  'section', 
                                  'paragraph',
                                  'table',
                                  'hypothesis',
                                  'source',
                                  'method',
                                  'event',
                                  'result');

CREATE TABLE entities(
    entity_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity_type entity_types,
    entity_name TEXT,
    entity_parent INTEGER,
    entity_embed vector(1536),
    FOREIGN KEY (entity_parent) REFERENCES entities(entity_id) ON DELETE CASCADE
);
ALTER TABLE entities
    ADD CONSTRAINT unique_entities UNIQUE(entity_type, entity_name),
    ADD CONSTRAINT unique_entity_parent UNIQUE(entity_type, entity_name, entity_parent);
ALTER TABLE entities
    ADD COLUMN IF NOT EXISTS entity_detail TEXT,
    ADD COLUMN IF NOT EXISTS entity_url TEXT,
    ADD COLUMN IF NOT EXISTS entity_contact TEXT,
    ADD COLUMN IF NOT EXISTS entity_json JSON;
ALTER TABLE entities
    ADD COLUMN IF NOT EXISTS supporting_evidence INTEGER,
    ADD FOREIGN KEY (supporting_evidence) REFERENCES entities(entity_id) ON DELETE CASCADE;
ALTER TABLE entities
    ADD FOREIGN KEY (supporting_evidence) REFERENCES entities(entity_id) ON DELETE CASCADE;


CREATE INDEX entity_name_idx ON entities USING btree ("entity_name");
CREATE INDEX entity_type_idx ON entities USING btree ("entity_type");
CREATE INDEX entity_parent_idx ON entities USING btree ("entity_parent");
CREATE INDEX entity_embed_idx ON entities
USING diskann (entity_embed vector_cosine_ops);

CREATE INDEX entity_keyword_idx ON entities USING GIN (to_tsvector('english', entity_detail));

-- Rename to assocation?
CREATE TABLE entity_link(
    from_id INTEGER,
    to_id INTEGER,
    entity_strength FLOAT,
    entity_support JSON,
    bidirectional BOOLEAN,
    PRIMARY KEY (from_id, to_id),
    FOREIGN KEY (from_id) REFERENCES entities(entity_id) ON DELETE CASCADE,
    FOREIGN KEY (to_id) REFERENCES entities(entity_id) ON DELETE CASCADE
);

ALTER TABLE entity_link
    ADD COLUMN link_type TEXT;

CREATE TABLE entity_tags(
    entity_id INTEGER,
    tag_name text,
    tag_value text,
    tag_json JSON,
    tag_embed vector(1536),
    PRIMARY KEY (entity_id, tag_name),
    FOREIGN KEY (entity_id) REFERENCES entities(entity_id) ON DELETE CASCADE
);

CREATE INDEX entity_tag_idx ON entity_tags(tag_name);
CREATE INDEX entity_tag_val_idx ON entity_tags(tag_value);
CREATE INDEX entity_tag_embedding_idx ON entity_tags
USING diskann (tag_embed vector_cosine_ops);


CREATE INDEX entity_tag_keyword_idx ON entity_tags USING GIN (to_tsvector('english', tag_value));


CREATE VIEW paragraph_tags_view AS
    SELECT entity_id AS paragraph_id, tag_name, tag_value
    FROM entity_tags
    UNION
    select entities.entity_id as paragraph_id, tag_name, tag_value
    from entities JOIN entity_tags ON entity_tags.entity_id = entities.entity_parent
    WHERE entities.entity_type = 'paragraph';


CREATE VIEW authors_view AS
    SELECT entity_id, entity_name, entity_contact, entity_detail
    FROM entities
    WHERE entity_type = 'author';

CREATE VIEW papers_view AS
    SELECT entity_id, entity_name, entity_url
    FROM entities
    WHERE entity_type = 'paper';

CREATE VIEW paragraphs_view AS
    SELECT entity_id, entity_name, entity_parent
    FROM entities
    WHERE entity_type = 'paragraph';

CREATE VIEW paragraphs_papers_authors_view AS
    SELECT para.entity_detail, paper.entity_url, author.entity_name, author.entity_contact
    FROM entities para JOIN entities paper ON para.entity_parent = paper.entity_id
    JOIN entities author ON paper.entity_parent = author.entity_id
    WHERE para.entity_type = 'paragraph' and paper.entity_type = 'paper' and author.entity_type = 'author';

grant select, insert, update, delete on all tables in schema public to kair;

